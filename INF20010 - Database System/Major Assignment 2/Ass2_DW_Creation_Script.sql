-- Major Assessment Task 2 --
-- Student Name: Nguyen Linh Dan
-- Student ID: 103488557
-- Student Name: Dang Vi Luan
-- Student ID: 103802759

-- PART 1

-- TASK 1.1

DROP SEQUENCE SEQ_A2ERROREVENT;
CREATE SEQUENCE SEQ_A2ERROREVENT;


CREATE TABLE A2ERROREVENT (
    ERRORID INTEGER,
    SOURCE_ROWID ROWID,
    SOURCE_TABLE VARCHAR2(30),
    ERRORCODE INTEGER,
    FILTERID INTEGER,
    DATETIME DATE,
    ACTION VARCHAR2(6),
    CONSTRAINT ERROREVENTACTION
    CHECK (ACTION IN ('SKIP','MODIFY'))
);

/

-- TASK 1.2

DROP SEQUENCE SEQ_DWPROD;
DROP SEQUENCE SEQ_DWCUST;
DROP SEQUENCE SEQ_DWSALE;

CREATE SEQUENCE SEQ_DWPROD;
CREATE SEQUENCE SEQ_DWCUST;
CREATE SEQUENCE SEQ_DWSALE;

CREATE TABLE DWPROD (
    DWPRODID INTEGER, 
    DWSOURCETABLE VARCHAR(20), 
    DWSOURCEID INTEGER, 
    PRODNAME VARCHAR(100), 
    PRODCATNAME VARCHAR2(30), 
    PRODMANUNAME VARCHAR2(30),
    PRODSHIPNAME VARCHAR2(30) );
    
CREATE TABLE DWCUST (
    DWCUSTID INTEGER, 
    DWSOURCEIDBRIS INTEGER,
    DWSOURCEIDMELB INTEGER, 
    FIRSTNAME VARCHAR(20), 
    SURNAME VARCHAR(20), 
    GENDER VARCHAR(10), 
    PHONE VARCHAR(20), 
    POSTCODE NUMBER(4,0),
    CITY VARCHAR(20), 
    STATE VARCHAR(20), 
    CUSTCATNAME VARCHAR(20)
);

CREATE TABLE DWSALE (
    DWSALEID INTEGER, 
    DWCUSTID INTEGER, 
    DWPRODID INTEGER, 
    DWSOURCEIDBRIS INTEGER, 
    DWSOURCEIDMELB INTEGER, 
    QTY NUMBER(2,0), 
    SALE_DWDATEID INTEGER,
    SHIP_DWDATEID INTEGER, 
    SALEPRICE NUMBER(10,2)
);

/

-- TASK 1.3

CREATE TABLE GENDERSPELLING (invalid_value VARCHAR(10), new_value VARCHAR(1));
INSERT INTO GENDERSPELLING(invalid_value, new_value) VALUES ('MAIL', 'M');
INSERT INTO GENDERSPELLING(invalid_value, new_value) VALUES ('WOMAN', 'F');
INSERT INTO GENDERSPELLING(invalid_value, new_value) VALUES ('FEM', 'F');
INSERT INTO GENDERSPELLING(invalid_value, new_value) VALUES ('FEMALE', 'F');
INSERT INTO GENDERSPELLING(invalid_value, new_value) VALUES ('MALE', 'M');
INSERT INTO GENDERSPELLING(invalid_value, new_value) VALUES ('GENTLEMAN', 'M');
INSERT INTO GENDERSPELLING(invalid_value, new_value) VALUES ('MM', 'M');
INSERT INTO GENDERSPELLING(invalid_value, new_value) VALUES ('FF', 'F');
INSERT INTO GENDERSPELLING(invalid_value, new_value) VALUES ('FEMAIL', 'F');


-- PART 2

-- TASK 2.1 filter 1
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2PRODUCT', 116, 1, SYSDATE, 'SKIP'
FROM A2PRODUCT P WHERE P.PRODNAME IS NULL;
COMMIT;

/

-- TASK 2.2 filter 2
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2PRODUCT', 129, 2, SYSDATE, 'MODIFY'
FROM A2PRODUCT P WHERE P.MANUFACTURERCODE IS NULL;
COMMIT;

/

-- TASK 2.3 filter 3
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2PRODUCT', 141, 3, SYSDATE, 'MODIFY'
FROM A2PRODUCT P
WHERE P.PRODCATEGORY IS NULL 
OR P.PRODCATEGORY NOT IN (SELECT C.PRODUCTCATEGORY FROM A2PRODCATEGORY C);
COMMIT;


-- TASK 2.4.1 AND 2.4.2 NO CODE

/

--TASK 2.4.3
INSERT INTO DWPROD
 SELECT SEQ_DWPROD.NEXTVAL, 'A2PRODUCT', PRODID, PRODNAME, CATEGORYNAME, MANUNAME,
DESCRIPTION
FROM A2PRODUCT P
NATURAL JOIN A2MANUFACTURER M, A2SHIPPING S, A2PRODCATEGORY C
WHERE P.ROWID NOT IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E) 
AND M.MANUCODE = P.MANUFACTURERCODE
AND C.PRODUCTCATEGORY = P.PRODCATEGORY
AND S.SHIPPINGCODE = P.SHIPPINGCODE;

COMMIT;

/

-- TASK 2.4.4
INSERT INTO DWPROD 
SELECT SEQ_DWPROD.NEXTVAL, 'A2PRODUCT', PRODID, PRODNAME, CATEGORYNAME, 'UNKNOWN', 
DESCRIPTION
 FROM A2PRODUCT P
 NATURAL JOIN A2PRODCATEGORY PC, A2SHIPPING S
 WHERE P.ROWID IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E WHERE E.FILTERID = 2 ) 
 AND PC.PRODUCTCATEGORY = P.PRODCATEGORY 
 AND S.SHIPPINGCODE = P.SHIPPINGCODE;
COMMIT; 

/

-- TASK 2.4.5
INSERT INTO DWPROD
 SELECT SEQ_DWPROD.NEXTVAL, 'A2PRODUCT', PRODID, PRODNAME, 'UNKNOWN', MANUNAME,
DESCRIPTION
 FROM A2PRODUCT P
 NATURAL JOIN A2MANUFACTURER M, A2SHIPPING S
 WHERE P.ROWID IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E WHERE E.FILTERID = 3 ) 
 AND M.MANUCODE = P.MANUFACTURERCODE 
 AND S.SHIPPINGCODE = P.SHIPPINGCODE;
COMMIT;

/

-- PART 3

-- TASK 3.1 filter 4
INSERT INTO A2ERROREVENT 
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2CUSTBRIS', 168, 4, SYSDATE, 'MODIFY'
FROM A2CUSTBRIS B
WHERE B.CUSTCATCODE NOT IN (SELECT C.CUSTCATCODE FROM A2CUSTCATEGORY C) 
OR B.CUSTCATCODE IS NULL;
COMMIT;

/

-- TASK 3.2 filter 5
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2CUSTBRIS', 196, 5, SYSDATE, 'MODIFY'
FROM A2CUSTBRIS B
WHERE INSTR(B.PHONE, '-') > 0 
OR INSTR(B.PHONE, ' ') > 0;
COMMIT;


-- TASK 3.3 filter 6
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2CUSTBRIS', 204, 6, SYSDATE, 'SKIP'
FROM A2CUSTBRIS B
WHERE (NOT(PHONE LIKE '%-%' OR PHONE LIKE '% %')) 
AND LENGTH(B.PHONE) != 10;
COMMIT;

/

-- TASK 3.4 filter 7
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2CUSTBRIS', 231, 7, SYSDATE, 'MODIFY'
FROM A2CUSTBRIS B
WHERE UPPER(B.GENDER) NOT LIKE 'M' AND UPPER(B.GENDER) NOT LIKE 'F'
OR B.GENDER IS NULL;
COMMIT;

/

-- TASK 3.5.1
INSERT INTO DWCUST(DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT SEQ_DWCUST.NEXTVAL, CUSTID, FNAME, SNAME, UPPER(GENDER), PHONE, POSTCODE, CITY, B.STATE, CUSTCATNAME
FROM A2CUSTBRIS B
NATURAL JOIN A2CUSTCATEGORY C
WHERE B.ROWID NOT IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E);
COMMIT;

/

-- TASK 3.5.2
INSERT INTO DWCUST(DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME) 
SELECT SEQ_DWCUST.NEXTVAL, CUSTID, FNAME, SNAME, UPPER(GENDER), PHONE, POSTCODE, CITY, B.STATE, 'UNKNOWN'
FROM A2CUSTBRIS B
WHERE B.ROWID IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E WHERE E.FILTERID = 4);
COMMIT;

/

-- TASK 3.5.3
INSERT INTO DWCUST(DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME) 
SELECT SEQ_DWCUST.NEXTVAL, CUSTID, FNAME, SNAME, UPPER(GENDER), REPLACE(REPLACE(PHONE,'-',''),' ',''), POSTCODE, CITY, B.STATE, CUSTCATNAME
FROM A2CUSTBRIS B
NATURAL JOIN A2CUSTCATEGORY C
WHERE B.ROWID IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E WHERE E.FILTERID = 5);
COMMIT;

/

-- TASK 3.5.4
INSERT INTO DWCUST(DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME) 
SELECT SEQ_DWCUST.NEXTVAL, CUSTID, FNAME, SNAME, 
    CASE 
    WHEN UPPER(B.GENDER) IN (SELECT invalid_value FROM GENDERSPELLING)
    THEN (SELECT new_value from GENDERSPELLING G WHERE UPPER(B.GENDER) = G.invalid_value)
    ELSE 'U'
    END,
PHONE, POSTCODE, CITY, B.STATE, CUSTCATNAME FROM A2CUSTBRIS B
NATURAL JOIN A2CUSTCATEGORY C
WHERE B.ROWID IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E WHERE E.FILTERID = 7);
COMMIT;

/

-- TASK 3.5.5 - TESTING, NO CODE

-- PART 4

--TASK 4.1
MERGE INTO DWCUST C
USING (SELECT * FROM A2CUSTMELB MEL INNER JOIN A2CUSTCATEGORY CAT ON MEL.CUSTCATCODE = CAT.CUSTCATCODE) M
ON (C.FIRSTNAME = M.FNAME AND C.SURNAME = M.SNAME AND C.POSTCODE = M.POSTCODE)
WHEN MATCHED THEN
    UPDATE SET C.DWSOURCEIDMELB = M.CUSTID
WHEN NOT MATCHED THEN
    INSERT (DWCUSTID, DWSOURCEIDMELB, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
    VALUES (SEQ_DWCUST.NEXTVAL, M.CUSTID, M.FNAME, M.SNAME, UPPER(M.GENDER), M.PHONE, M.POSTCODE, M.CITY, M.STATE, M.CUSTCATNAME);

COMMIT;

/

-- PART 5
-- TASK 5.1 filter 8
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2SALEBRIS', 247, 8, SYSDATE, 'SKIP'
FROM A2SALEBRIS B
WHERE B.PRODID NOT IN (SELECT DWSOURCEID FROM DWPROD)
OR B.PRODID IS NULL;

COMMIT;

/

-- TASK 5.2 filter 9
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2SALEBRIS', 272, 9, SYSDATE, 'SKIP'
FROM A2SALEBRIS
WHERE NOT EXISTS (SELECT NULL FROM DWCUST WHERE A2SALEBRIS.CUSTID = DWCUST.DWSOURCEIDBRIS);
COMMIT;

/

-- TASK 5.3 filter 10
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2SALEBRIS', 294, 10, SYSDATE, 'MODIFY'
FROM A2SALEBRIS 
WHERE SHIPDATE < SALEDATE;

COMMIT;

/

-- TASK 5.4 filter 11
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2SALEBRIS', 317, 11, SYSDATE, 'MODIFY'
FROM A2SALEBRIS 
WHERE UNITPRICE IS NULL;

COMMIT;

/

-- TASK 5.5 
INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT SEQ_DWSALE.NEXTVAL, 
    (SELECT DWCUSTID FROM DWCUST WHERE DWSOURCEIDBRIS = B.CUSTID),
    (SELECT DWPRODID FROM DWPROD WHERE DWSOURCEID = B.PRODID),
    B.SALEID, B.QTY,
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = B.SALEDATE),
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = B.SHIPDATE),
    B.UNITPRICE
FROM A2SALEBRIS B
WHERE ROWID NOT IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E);

COMMIT;

/

-- TASK 5.6 
INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT SEQ_DWSALE.NEXTVAL, 
    (SELECT DWCUSTID FROM DWCUST C WHERE DWSOURCEIDBRIS = B.CUSTID),
    (SELECT DWPRODID FROM DWPROD WHERE DWSOURCEID = B.PRODID),
    B.SALEID, B.QTY,
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = B.SALEDATE),
    ((SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = B.SALEDATE) + 2),
    B.UNITPRICE
FROM A2SALEBRIS B
INNER JOIN DWPROD P ON P.DWSOURCEID = B.PRODID
WHERE B.ROWID IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E WHERE E.FILTERID = 10);

COMMIT;

/

-- TASK 5.7 
INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT SEQ_DWSALE.NEXTVAL,
    (SELECT DWCUSTID FROM DWCUST WHERE DWSOURCEIDBRIS = B.CUSTID),
    (SELECT DWPRODID FROM DWPROD WHERE DWSOURCEID = B.PRODID),
    B.SALEID, B.QTY,
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = B.SALEDATE),
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = B.SHIPDATE),
    (SELECT MAX(UNITPRICE) FROM A2SALEBRIS WHERE PRODID = P.DWSOURCEID)
FROM A2SALEBRIS B
INNER JOIN DWPROD P ON P.DWSOURCEID = B.PRODID
WHERE B.ROWID IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E WHERE E.FILTERID = 11);

COMMIT;

/

-- PART 6
-- TASK 6.1 filter 12
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2SALEMELB', 325, 12, SYSDATE, 'SKIP'
FROM A2SALEMELB 
WHERE PRODID NOT IN (SELECT P.DWSOURCEID FROM DWPROD P);

COMMIT;
/

-- TASK 6.2 filter 13
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2SALEMELB', 346, 13, SYSDATE, 'SKIP'
FROM A2SALEMELB 
WHERE CUSTID NOT IN (SELECT C.DWSOURCEIDMELB FROM DWCUST C WHERE C.DWSOURCEIDMELB IS NOT NULL)
OR CUSTID IS NULL;

COMMIT;

/

-- TASK 6.3 filter 14
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2SALEMELB', 379, 14, SYSDATE, 'MODIFY'
FROM A2SALEMELB 
WHERE SHIPDATE < SALEDATE;

COMMIT;

/

-- TASK 6.4 filter 15
INSERT INTO A2ERROREVENT
SELECT SEQ_A2ERROREVENT.NEXTVAL, ROWID, 'A2SALEMELB', 391, 15, SYSDATE, 'MODIFY'
FROM A2SALEMELB 
WHERE UNITPRICE IS NULL;

COMMIT;

/

-- TASK 6.5
INSERT INTO DWSALE(DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDMELB , QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT SEQ_DWSALE.NEXTVAL, 
    (SELECT DWCUSTID FROM DWCUST WHERE DWSOURCEIDMELB  = M.CUSTID),
    (SELECT DWPRODID FROM DWPROD WHERE DWSOURCEID = M.PRODID),
    M.SALEID, M.QTY,
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = M.SALEDATE),
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = M.SHIPDATE),
    M.UNITPRICE
FROM A2SALEMELB M
WHERE ROWID NOT IN (SELECT SOURCE_ROWID FROM A2ERROREVENT );

COMMIT;

/

-- TASK 6.6 
INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDMELB , QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT SEQ_DWSALE.NEXTVAL, 
    (SELECT DWCUSTID FROM DWCUST C WHERE DWSOURCEIDMELB  = M.CUSTID),
    (SELECT DWPRODID FROM DWPROD WHERE DWSOURCEID = M.PRODID),
    M.SALEID, M.QTY,
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = M.SALEDATE),
    ((SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = M.SALEDATE) + 2),
    M.UNITPRICE
FROM A2SALEMELB M
WHERE ROWID IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E WHERE E.FILTERID = 14);

COMMIT;

/

-- TASK 6.7 
INSERT INTO DWSALE (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDMELB , QTY, SALE_DWDATEID, SHIP_DWDATEID, SALEPRICE)
SELECT SEQ_DWSALE.NEXTVAL,
    (SELECT DWCUSTID FROM DWCUST WHERE DWSOURCEIDMELB  = M.CUSTID),
    (SELECT DWPRODID FROM DWPROD WHERE DWSOURCEID = M.PRODID),
    M.SALEID, M.QTY,
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = M.SALEDATE),
    (SELECT DATEKEY FROM DWDATE WHERE DATEVALUE = M.SHIPDATE),
    (SELECT MAX(UNITPRICE) FROM A2SALEMELB WHERE PRODID = P.DWSOURCEID)
FROM A2SALEMELB M
INNER JOIN DWPROD P ON P.DWSOURCEID = M.PRODID
WHERE M.ROWID IN (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E WHERE E.FILTERID = 15);

COMMIT;

/

-- PART 7
-- TASK 7.1
DELETE FROM DWSALE S
WHERE S.DWSOURCEIDMELB IN 
    (SELECT SALEID AS DWSOURCEIDMELB FROM A2SALEMELB M WHERE M.ROWID IN
        (SELECT SOURCE_ROWID FROM A2ERROREVENT WHERE SOURCE_TABLE = 'A2SALEMELB'
            GROUP BY SOURCE_ROWID HAVING COUNT(SOURCE_ROWID) > 1 ));
        
        
-- PART 8
-- TASK A
SELECT TO_CHAR(D.DATEVALUE, 'DAY') AS "WEEKDAY",
SUM(S.QTY * S.SALEPRICE) AS "TOTAL SALES"
FROM DWSALE S
INNER JOIN DWDATE D
ON D.DATEKEY = S.SALE_DWDATEID
GROUP BY TO_CHAR(D.DATEVALUE, 'DAY')
ORDER BY SUM(S.QTY * S.SALEPRICE) DESC;

-- TASK B
SELECT C.CUSTCATNAME AS "CUSTCATNAME",
SUM(SALEPRICE * QTY) AS "TOTAL SALES"
FROM DWCUST C
INNER JOIN DWSALE S
ON S.DWCUSTID = C.DWCUSTID
GROUP BY CUSTCATNAME
ORDER BY SUM(SALEPRICE * QTY);

-- TASK C
SELECT P.PRODMANUNAME AS "PRODMANUNAME", 
SUM(S.QTY) AS "TOTAL QTY SOLD"
FROM DWPROD P
INNER JOIN DWSALE S
ON S.DWPRODID = P.DWPRODID
GROUP BY P.PRODMANUNAME
ORDER BY SUM(S.QTY) DESC;

-- TASK D
SELECT C.DWCUSTID AS "DWCUSTID",
FIRSTNAME, SURNAME,
SUM(S.QTY * S.SALEPRICE) AS "TOTAL SALES"
FROM DWCUST C
INNER JOIN DWSALE S 
ON S.DWCUSTID = C.DWCUSTID
GROUP BY C.DWCUSTID, C.FIRSTNAME, C.SURNAME
ORDER BY SUM(S.QTY * S.SALEPRICE) DESC
FETCH FIRST 10 ROWS ONLY;

-- TASK E
SELECT * FROM (
    SELECT P.DWPRODID, PRODNAME,
    SUM(S.QTY * S.SALEPRICE) AS "TOTAL SALES"
    FROM DWPROD P
    INNER JOIN DWSALE S 
    ON S.DWPRODID = P.DWPRODID
    GROUP BY P.DWPRODID, P.PRODNAME
    ORDER BY SUM(S.QTY * S.SALEPRICE) DESC)
WHERE ROWNUM <= 10
ORDER BY ROWNUM DESC;


-- TASK F

SELECT * FROM
    (SELECT STATE, CITY, SUM(S.QTY * S.SALEPRICE) AS TOTALSALES
    FROM DWCUST C
    INNER JOIN DWSALE S 
    ON C.DWCUSTID = S.DWCUSTID
    GROUP BY C.STATE, C.CITY
    ORDER BY C.STATE)
    WHERE TOTALSALES = ANY( SELECT MAXSALES FROM ( SELECT T.STATE, MAX(T.TOTALSALES) AS "MAXSALES" FROM (
    SELECT STATE, CITY,
    SUM(S.QTY * S.SALEPRICE) TotalSales
        FROM DWCUST C
        INNER JOIN DWSALE S 
        ON C.DWCUSTID = S.DWCUSTID
        GROUP BY C.STATE, C.CITY
        ORDER BY C.STATE ) T
    GROUP BY T.STATE
    ORDER BY T.STATE ASC )
)
    














